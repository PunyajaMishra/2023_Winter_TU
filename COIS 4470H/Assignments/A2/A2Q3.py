# ------------------------------------------------------------------------------
# COIS-4470H Modelling and Simulation
# Assignment 2 Question 3
# Name : Monte Carlo Simulation
# 
# Written By : Punyaja Mishra, February 2023
#
# Language : Python
#  
# This porgram is the Monte Carlo Simulation. The program asks user to enter
# the center points and the radius of the circle. It then generates a bunch
# of random points that lie ON the circle and then INSIDE the circle.
#
# Input File :
#       None
#
#
# EXPERIMENTS = 1000    Number of experiments 
# -----------------------------------------------------------------------------

# import necessary libraries
import random                       # for generating random numbers
import math                         # for value of pi
import matplotlib.pyplot as plt

# Number of points to be generated by the porgram
NUM_POINTS = 1000

# ask user for center of the circle (a,b) and radius r
a = float(input("Please Enter the x-coordinate of the center: "))
b = float(input("Please Enter the y-coordinate of the center: "))
r = float(input("Please Enter the radius of the circle: "))


# Part A- Generate points on the circumference of the circle
# Array to store all generated x and y coordinates
x_coords = []
y_coords = []
for i in range(NUM_POINTS):
    # Generate random angle theta
    theta = random.uniform(-math.pi, math.pi)       # -pi to pi
    
    # Use formula to find x,y points that lies on circuference of circle
    # The formula uses trigonometric clcualtions on the triange generated
    # using radius and center points of the circle
    x = a + r*math.cos(theta)
    y = b + r*math.sin(theta)

    # Append to array of coordinates for visualization purposes
    x_coords.append(x)
    y_coords.append(y)

    # print all values of x and y coordiantes that lie on the circumference of the circle
    #print("({:.2f},{:.2f})".format(x,y))

# Using matplotlib to plot this into a visualized graph of circle
# create a sbplot
fig, ax = plt.subplots()
# create a circle with center 1,b and radius r
circle = plt.Circle((a,b), r, fill=False)
# display the circle on the subplot
ax.add_artist(circle)
# scatter the generated points
ax.scatter(x_coords, y_coords)
# circle looks uniform
plt.axis('equal')

# Part B - Points are generated inside the circle
# Array to store all generated x and y coordinates
x_coords2 = []
y_coords2 = []

for i in range(NUM_POINTS):
    # boolean value to check if the generated point lies inside the circle
    in_circle = False
    # Use formula to find x,y points that lies on circuference of circle
    # Loop continues UNTIL we find the point that lies INSIDE the circle
    while not in_circle:
        # x and y values are unifomrly and randomly generated within -r to r (so it lies inside circle)
        x = random.uniform(-r, r)
        y = random.uniform(-r, r)

        # check if they lie within the circle's area 
        if(math.pow(x,2) + math.pow(y,2) <= math.pow(r,2)):
            # if yes then change bool flag to true
            x = a + x
            y = b + y
            in_circle = True

    # Append to array of coordinates for visualization purposes
    x_coords2.append(x)
    y_coords2.append(y)

    # print all values of x and y coordiantes that lie on the circumference of the circle
    #print("({:.2f},{:.2f})".format(x,y))

# Using matplotlib to plot this into a visualized graph of circle 2
# create a suplot
fig2, ax2 = plt.subplots()
# create a circle with center 1,b and radius r
circle2 = plt.Circle((a,b), r, fill=False)
# display the circle on the subplot
ax2.add_artist(circle2)
# scatter the generated points
ax2.scatter(x_coords2, y_coords2)
# circle looks uniform
plt.axis('equal')

# show the graphs
plt.show()
